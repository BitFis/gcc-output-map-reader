{"version":3,"sources":["parser/MapParser.tsx","utils/Timer.tsx","ui/OutputDrop.tsx","ui/Table.tsx","utils/Formatter.ts","ui/tables/All.tsx","ui/tables/Modules.tsx","utils/Functions.tsx","ui/tables/Skeleton.tsx","ui/DataView.tsx","ui/Downloader.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["refreshUI","_refreshUI","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","wrap","_context3","prev","next","Promise","r","setTimeout","stop","SubSection","Section","FullName","StartAddress","Size","FullFileName","_classCallCheck","Additonal","MangledList","AddressSpaceSize","Name","Mangled","FileName","Module","subModuleName","exec","this","subSectionSplit","_createClass","key","value","count","length","sort","a","b","AddressStart","reduce","last","item","subsection_content","match","SUBSECTION_CONTENT","counter","dontCountAnyFollowUp","lastAddress","totalInnerSize","identifier","startsWith","push","trim","addressStart","mangaledName","test","console","debug","concat","MapParser","ADDRESS_HEX_LENGTH","address","parseInt","size","MangledName","log","error","NumRecords","SubSectionsList","section_content","mapParser","SUBSECTION_REGEX","subsection","fileName","subSection","replace","parse","SubSections","getNumRecords","section","ObjData","Archives","Sections","_ObjData","_inherits","_super","_createSuper","_this","_len","args","Array","_key","call","currentPos","regex","index","lastIndex","Archive","CompilationUnit","FileLocation","Symbol","SymbolCall","File","_match$","_match$2","name","hexaddr","slice","hexsize","warn","append","segment","regexList","SEGMENT_STARTS_LIST","parseFunction","undefined","activeSegment","RegExp","ARCHIVE_START","ARCHIVE_REGEX","parseArchiveMatch","bind","SECTION_START","SECTION_REGEX","parseSectionMatch","Regex","join","ParseFunction","_parse","_callee","content","_context","shift","getSegmentRegex","_x","_class4","TurnOnAMPEquality","ADDRESS_MATCHER","SECTION_SIZE_MATCHER","Timer","start","Date","now","Format","ElapsedMs","_SleepMs","ms","abrupt","resolve","num","suffix","elapsedMs","sec","Math","floor","min","hours","str","OutputDrop","_ref","OnLoaded","_useFilePicker","useFilePicker","multiple","accept","_useFilePicker2","_slicedToArray","filesContent","errors","loading","_useState","useState","_useState2","dropLoading","setDropLoading","_useState3","_useState4","dropError","setDropError","_useState5","_useState6","filesystemError","setFilesystemError","_useState7","_useState8","hover","setHover","JSON","stringify","_jsxs","children","Alert","onClose","severity","_jsx","AlertTitle","FileDrop","onDrop","files","timer","Reset","arrayBuffer","then","_callee2","buffer","parser","_context2","Uint8Array","forEach","byte","String","fromCharCode","_x2","res","rej","parseFile","catch","err","finally","onDragOver","onDragLeave","Box","sx","p","border","m","justifyContent","justifyItems","Button","disabled","onClick","fullWidth","style","backgroundColor","Table","data","columns","Grid","search","pagination","enabled","limit","className","td","th","footer","Formatter","bytes","all","KB","MB","number","toString","AllTableColumnsOrder","formatter","cell","TablesAll","ModulesTableColumnsOrder","a11yProps","id","TableSkeleton","Skeleton","animation","height","variant","DataTableArray","ColumnsOrder","Items","insert","sorted","c","DataView","setValue","allData","setAllData","allModules","setAllModules","useEffect","fillDatabase","map","notPartOfArchive","Object","keys","k","sectionKey","subSections","Address","AddressHex","ToHex","partOfModule","mangled","add","TabContext","borderBottom","borderColor","Tabs","onChange","_event","newValue","Tab","_objectSpread","label","TabPanel","ProcessState","CircularProgressWithLabel","props","position","display","CircularProgress","top","left","bottom","right","alignItems","Typography","component","color","fileQuery","Downloader","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","file","get","downloadUrl","setDownloadUrl","Progress","Idle","state","setState","setError","ProgressState","State","SetProgress","prog","Failed","Start","Download","Prepare","Parse","LoadView","Done","downloadFile","source","t","fetch","reject","ok","blob","_ref2","text","_ref3","parsed","Backdrop","zIndex","theme","drawer","open","Paper","onSubmit","e","preventDefault","set","InputBase","ml","flex","placeholder","inputProps","target","Divider","orientation","IconButton","DownloadIcon","Layout","Container","maxWidth","my","gutterBottom","href","CloudDownloadIcon","Outlet","Home","setData","App","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","container","document","getElementById","Error","createRoot","render","React","StrictMode","BrowserRouter"],"mappings":"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","file":"static/js/main.10d2ef92.chunk.js","sourcesContent":["interface SubSectionSpace {\n  MangledName: string;\n  AddressStart: number;\n  Size: number;\n}\n\n// WIP: Use Worker in the future\nasync function refreshUI() {\n  await new Promise((r) => setTimeout(r, 0));\n}\n\nclass SubSection {\n  public Additonal: string[] = []; // valid but not specifically parser\n  // *(.xyz) options or *fill* -> not further processed for now\n  // mangledSubsectionContent\n  public MangledList: SubSectionSpace[] = [];\n  // -1 = undefined\n  public AddressSpaceSize = -1;\n\n  public Name: string;\n  public Mangled = \"\";\n  public FileName = \"\";\n  public Module = \"\";\n\n  constructor(\n    public Section: string, // Section name\n    public FullName: string, // Subsection name\n    public StartAddress: number, // Start address\n    public Size: number, // Size of subsection\n    public FullFileName: string // Filename\n  ) {\n    // eslint-disable-next-line\n    const subModuleName = /([^\\(]+)\\(([^\\)]+)/g.exec(FullFileName);\n    if (subModuleName) {\n      this.FileName = subModuleName[1] || FullFileName;\n      this.Module = subModuleName[2] || \"\";\n    } else {\n      this.FileName = FullFileName;\n    }\n\n    // eslint-disable-next-line\n    const subSectionSplit = /(\\.[^\\.]+)(.*)/g.exec(FullName);\n    if (subSectionSplit) {\n      this.Name = subSectionSplit[1] || \"\";\n      this.Mangled = subSectionSplit[2] || \"\";\n    } else {\n      this.Name = FullName;\n    }\n  }\n\n  getNumRecords(): number {\n    let count = 0;\n    if (this.Size > 0) {\n      count += 1;\n      if (this.MangledList.length > 0) {\n        // counts any number of records (if mangled name uses own address space)\n        this.MangledList.sort((a, b) => {\n          return a.AddressStart - b.AddressStart;\n        }).reduce((last, item) => {\n          if (last.AddressStart != item.AddressStart) {\n            count++;\n          }\n          return item;\n        });\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Parse subsection content and return number of child sections\n   */\n  parse(subsection_content: string): number {\n    //                         [space]   [* or space]\n    //                                if [---space--] [0x-address--------] [--mangaled name-]\n    //                                if [*][--some--additonal-info-(*fill* or *(.))---]\n    // eslint-disable-next-line\n    const SUBSECTION_CONTENT = /\\n[^\\.\\n](\\*[^\\n]*| +)(0x[0-9a-fA-F]+|[^ ]+)? *([^\\n]*)/gm;\n\n    let match;\n    let counter = 0;\n    let dontCountAnyFollowUp = false;\n    // used to calculate size\n    let lastAddress = 0;\n    let totalInnerSize = 0;\n\n    while ((match = SUBSECTION_CONTENT.exec(subsection_content)) != null) {\n      const identifier = match[1];\n\n      if (!identifier) {\n        console.log(\n          `Potential SubSection parse issue in ${this.Section}:${this.Name}`,\n          subsection_content\n        );\n        continue;\n      }\n\n      if (identifier.startsWith(\"*\")) {\n        // found additonal content\n        this.Additonal.push(identifier);\n      } else if (identifier.trim() === \"\") {\n        const addressStart = match[2];\n        const mangaledName = match[3] ? match[3] : \"\";\n\n        // check valid hex\n        if (/^0x([0-9a-fA-F])+$/.test(addressStart)) {\n          // (REFACTOR: cleaner regex needed for identifing)\n          // check if address or size\n          if (addressStart.length == MapParser.ADDRESS_HEX_LENGTH) {\n            // it is an actual address space\n            const address = parseInt(addressStart, 16);\n            let size = 0;\n            if (this.MangledList.length > 0) {\n              size = address - lastAddress;\n            }\n            address - lastAddress;\n            this.MangledList.push({\n              AddressStart: parseInt(addressStart, 16),\n              MangledName: mangaledName,\n              Size: size,\n            });\n            lastAddress = address;\n            totalInnerSize += size;\n\n            // used for amax.exe\n            if (!dontCountAnyFollowUp) {\n              counter += 1;\n            }\n          } else {\n            // it is the size representation\n            // WIP, what todo\n          }\n        } else {\n          // no valid hex provided,\n          // this could be [!provide] value, lets just ignore but inform if not [!provide] - provide can be expected\n          if (\"[!provide]\" !== addressStart.trim()) {\n            console.debug(\n              `Ignoring SubSection content '${addressStart}' in ${this.Section}:${this.Name}`,\n              subsection_content\n            );\n          }\n          // TMP: compatible with AMP.exe\n          dontCountAnyFollowUp = true;\n          continue;\n        }\n      } else {\n        console.log(\n          `Potential SubSection parse issue in ${this.Section}:${this.Name} - strange start: '${identifier}' (expected * or ' ')`,\n          subsection_content\n        );\n      }\n\n      // check valid address space\n    }\n\n    // set size of first element\n    if (this.MangledList.length > 0) {\n      if (this.Size - totalInnerSize < 0) {\n        console.error(\n          `Issue while parsing, got negative number? ${\n            this.Size\n          } - ${totalInnerSize} = ${this.Size - totalInnerSize}`,\n          this\n        );\n      } else {\n        this.MangledList[0].Size = this.Size - totalInnerSize;\n      }\n    }\n\n    return counter;\n  }\n}\n\ninterface Archive {\n  Symbol: string;\n  FileLocation: string;\n  CompilationUnit: string;\n  SymbolCall: string;\n}\n\ninterface ArchiveFile {\n  File: string;\n  NumRecords: number;\n  Archives: Archive[];\n}\n\nexport class Section {\n  public NumRecords = 0;\n  // calculated length of address space to next sector\n  public AddressSpaceSize = 0;\n  public SubSectionsList: SubSection[] = [];\n\n  constructor(\n    public Name: string, //\n    public StartAddress: number,\n    public Size: number\n  ) {}\n\n  parse(section_content: string, mapParser: MapParser): SubSection[] {\n    // regex::             [subsection] [0xaddress space] [    0xsize    ]  [ subsection valid aslong '\\n ^.' ]\n    // eslint-disable-next-line\n    const SUBSECTION_REGEX = / (\\.[^ \\t\\n]+|COMMON)\\n? +(0x[0-9a-fA-F]+) +(0x[0-9a-fA-F]+) ?([^\\n]+)?((\\n [^\\.*][^\\n]*)*)/gm;\n\n    // result NumRecords\n    // WIP\n    // console.log(\"parse for section: \", this.Name);\n\n    let match;\n\n    while ((match = SUBSECTION_REGEX.exec(section_content)) != null) {\n      const subsection = match[1];\n      const address = match[2] ? parseInt(match[2]) : 0;\n      const size = match[3] ? parseInt(match[3]) : 0;\n      const fileName = match[4];\n\n      // Amp.exe -> \"only allow paths starting with /\"\n      // for amp.exe equality.\n      // if (!fileName.startsWith(\"/\")) {\n      //   continue;\n      // }\n\n      // WIP add to somewhere\n      const subSection = new SubSection(\n        this.Name,\n        subsection.replace(/\\.text.+/, \"\"),\n        address,\n        size,\n        fileName\n      );\n      if (match[5]) {\n        subSection.parse(match[5]);\n      }\n      this.SubSectionsList.push(subSection);\n      mapParser.SubSections.push(subSection);\n\n      this.NumRecords += subSection.getNumRecords();\n\n      if (subsection === \"COMMON\") {\n        // remove common record (TMP???)\n        this.NumRecords -= 1;\n      }\n    }\n\n    // WIP possible to extend, matching regions with *(.ldata / )\n    return this.SubSectionsList;\n  }\n\n  append(section: Section): void {\n    if (this.StartAddress == 0) {\n      this.StartAddress = section.StartAddress;\n    } else if (section.StartAddress != 0) {\n      console.log(\n        `undefined behaviour, joining section ${section.Name} - section exists twice with a address`\n      );\n    }\n    if (this.Size == 0) {\n      this.Size = section.Size;\n    } else if (section.Size != 0) {\n      console.log(\n        `undefined behaviour, joining section ${section.Name} - section exists twice with a size`\n      );\n    }\n    if (this.NumRecords == 0) {\n      this.NumRecords = section.NumRecords;\n    } else if (section.NumRecords != 0) {\n      console.log(\n        `undefined behaviour, joining section ${section.Name} - containing records twice`\n      );\n    }\n  }\n}\n\ntype SegmentParseFunction = (\n  match: RegExpExecArray,\n  regex: RegExp,\n  mapParser: MapParser\n) => void;\n\ninterface SegmentInfo {\n  Regex: RegExp;\n  ParseFunction?: SegmentParseFunction;\n  activeSegment?: string;\n}\n\nclass ObjData {\n  public Archives: {\n    [ArchiveFile: string]: ArchiveFile;\n  } = {};\n  public Sections: {\n    [key: string]: Section;\n  } = {};\n}\n\nclass MapParser extends ObjData {\n  private currentPos = 0;\n\n  // Wip, currently, since some stats are handled differently\n  // in the AMAP editor, and it is used as cross testing (expecting at least same results)\n  // this allows to turn \"backward\" compability on for correctness checking.\n  public static TurnOnAMPEquality = false;\n\n  // length of hex address representation, will help parsing\n  public static ADDRESS_HEX_LENGTH = 18;\n\n  // match hex storage address (0xADDRESS(8+))\n  public static ADDRESS_MATCHER = `(0x[0-9a-fA-F]{8,})`;\n  // match section size (0xHEX)\n  public static SECTION_SIZE_MATCHER = `(0x[0-9a-fA-F]+)`;\n\n  // Be aware, for string regex, following need a '\\' otherwise default string will be used:\n  //-> \\. => \\\\. (enforce . match)\n  //-> \\t => \\\\t (enforce tab match)\n\n  //                             [----section-------] [--0x address----] [---size (opt)--] [---anything till double \\n\\n-]\n  // eslint-disable-next-line\n  public static SECTION_REGEX = `\\n(\\\\.[^ \\n\\\\t]+)\\n? *${MapParser.ADDRESS_MATCHER}? *${MapParser.SECTION_SIZE_MATCHER}?([^\\n]*(\\n [^\\n]*)*)`;\n\n  //                            [archive-path] (-Symbol-)\\n  [CompileUnit](--Call--)\n  // eslint-disable-next-line\n  public static ARCHIVE_REGEX = `\\n([^\\\\(\\n ]+)\\\\(([^\\\\)]+)\\\\)\\n +([^\\n ]+) +([^\\n]+)`;\n\n  public static ARCHIVE_START = `Archive member included to satisfy reference by file[^\\n]*`;\n  public static SECTION_START = `Linker script and memory map[^\\n]*`;\n\n  // list of starts of new region within the output.map file\n  public static SEGMENT_STARTS_LIST = [\n    MapParser.ARCHIVE_START,\n    `Merging program properties[^\\n]*`,\n    `Discarded input sections[^\\n]*`,\n    `Memory Configuration[^\\n]*`,\n    MapParser.SECTION_START,\n  ];\n\n  public SubSections: SubSection[] = [];\n\n  private parseArchiveMatch(match: RegExpExecArray, regex: RegExp) {\n    if (match.length < 4) {\n      console.log(\n        `Unexpected parsing at character ${match.index} - ${regex.lastIndex}`,\n        match[0]\n      );\n    }\n\n    const key = `${match[1]}`;\n    const Archive = {\n      CompilationUnit: match[3],\n      FileLocation: match[1],\n      Symbol: match[2],\n      SymbolCall: match[4],\n    };\n\n    if (!this.Archives[key]) {\n      this.Archives[key] = {\n        Archives: [],\n        File: Archive.FileLocation,\n        NumRecords: 0,\n      };\n    }\n\n    this.Archives[key].NumRecords++;\n    this.Archives[key].Archives.push(Archive);\n  }\n\n  private parseSectionMatch(match: RegExpExecArray, regex: RegExp) {\n    if (match.length <= 4) {\n      console.log(`parser error at: ${match.index} ${regex.lastIndex}`);\n      return;\n    }\n\n    if (match.length >= 3) {\n      const name = match[1];\n      const hexaddr = match[2]?.slice(2);\n      const hexsize = match[3]?.slice(2);\n\n      if (!name || (!hexaddr && hexsize) || (hexaddr && !hexsize)) {\n        console.warn(\n          `possible parsing error at character ${match.index} - ${regex.lastIndex}`\n        );\n        return;\n      }\n\n      const section = new Section(\n        name,\n        hexaddr ? parseInt(hexaddr, 16) : 0,\n        hexsize ? parseInt(hexsize, 16) : 0\n      );\n      section.parse(match[4], this);\n      if (this.Sections[name]) {\n        this.Sections[name].append(section);\n      } else {\n        this.Sections[name] = section;\n      }\n    } else {\n      console.log(`parser error at: ${match.index} ${regex.lastIndex}`);\n    }\n  }\n\n  private getSegmentRegex(segment: string): SegmentInfo {\n    const regexList = MapParser.SEGMENT_STARTS_LIST.slice();\n    let parseFunction = undefined;\n    let activeSegment = undefined;\n\n    if (new RegExp(MapParser.ARCHIVE_START, \"g\").test(segment)) {\n      activeSegment = \"ARCHIVE\";\n      regexList.push(MapParser.ARCHIVE_REGEX);\n      parseFunction = this.parseArchiveMatch.bind(this);\n    } else if (new RegExp(MapParser.SECTION_START, \"g\").test(segment)) {\n      activeSegment = \"SECTION\";\n      regexList.push(MapParser.SECTION_REGEX);\n      parseFunction = this.parseSectionMatch.bind(this);\n    } else {\n      // WIP, ignore any other segment for now\n      // console.debug(`WIP: skip ${segment}`);\n    }\n    return {\n      Regex: new RegExp(`(${regexList.join(\"|\")})`, \"gm\"),\n      ParseFunction: parseFunction,\n      activeSegment: activeSegment,\n    };\n  }\n\n  async parse(content: string): Promise<void> {\n    let activeSegment: SegmentInfo = {\n      Regex: new RegExp(`(${MapParser.SEGMENT_STARTS_LIST.join(\"|\")})`, \"gm\"),\n      activeSegment: \"START\",\n    };\n\n    let match: RegExpExecArray | null;\n    while ((match = activeSegment.Regex.exec(content)) !== null) {\n      const next_match = match[2];\n\n      if (next_match) {\n        match.shift(); // access actual match\n\n        if (activeSegment.ParseFunction) {\n          activeSegment.ParseFunction(match, activeSegment.Regex, this);\n        } else {\n          console.debug(\n            \"unexpected match, no parsing function provided\",\n            match[0]\n          );\n        }\n      } else {\n        // replace active regex\n        const index = activeSegment.Regex.lastIndex;\n        activeSegment = this.getSegmentRegex(match[1]);\n        activeSegment.Regex.lastIndex = index;\n      }\n\n      // WIP: update state??\n      await refreshUI();\n    }\n  }\n}\n\nfunction parseFile(files: FileList | null): Promise<MapParser> {\n  if (files?.length === 1) {\n    const file = files.item(0) as File;\n\n    return file.arrayBuffer().then(async (buffer: ArrayBuffer) => {\n      let content = \"\";\n      new Uint8Array(buffer).forEach((byte: number) => {\n        content += String.fromCharCode(byte);\n      });\n\n      const parser = new MapParser();\n      await parser.parse(content);\n      return parser;\n    });\n  } else {\n    return new Promise((res, rej) => {\n      rej(\"provide one file!\");\n      console.error(files);\n    });\n  }\n}\n\nexport { MapParser, ObjData, parseFile };\n","class Timer {\n  constructor(private start = Date.now()) {}\n\n  ElapsedMs(): number {\n    return Date.now() - this.start;\n  }\n\n  Reset(): void {\n    this.start = Date.now();\n  }\n\n  Format(): string {\n    return Timer.Format(this.ElapsedMs());\n  }\n\n  static async SleepMs(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  private static str(num: number, suffix: string) {\n    return num ? `${num}${suffix}` : \"\";\n  }\n\n  static Format(elapsedMs: number): string {\n    const ms = elapsedMs % 1000;\n    elapsedMs -= ms;\n    const sec = Math.floor((elapsedMs / 1000) % 60);\n    elapsedMs -= sec * 1000;\n    const min = Math.floor((elapsedMs / 60 / 1000) % 60);\n    elapsedMs -= min * 60 * 1000;\n    const hours = Math.floor(elapsedMs / 60 / 60 / 1000);\n    elapsedMs -= hours * 60 * 60 * 1000;\n\n    const res = [\n      Timer.str(hours, \"h\"),\n      Timer.str(min, \"min\"),\n      Timer.str(sec, \"s\"),\n      Timer.str(ms, \"ms\"),\n    ];\n\n    return res.join(\" \").trim();\n  }\n}\nexport default Timer;\n","import { Alert, AlertTitle, Box, Button } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { FileDrop } from \"react-file-drop\";\nimport { useFilePicker } from \"use-file-picker\";\nimport { MapParser, parseFile } from \"../parser/MapParser\";\nimport Timer from \"../utils/Timer\";\n\ntype Props = {\n  OnLoaded: (mapParser: MapParser) => void;\n};\n\nconst OutputDrop = ({ OnLoaded }: Props): JSX.Element => {\n  const [filesContent, errors, openFileSelector, loading] = useFilePicker({\n    multiple: false,\n    // accept: '.ics,.pdf',\n    accept: [\".map\"],\n  });\n  // TMP\n  openFileSelector;\n  const [dropLoading, setDropLoading] = useState(false);\n  const [dropError, setDropError] = useState<boolean | string>(false);\n  const [filesystemError, setFilesystemError] = useState<boolean | string>(\n    false\n  );\n  const [hover, setHover] = useState(false);\n\n  if (filesContent[0]) {\n    console.log(\n      \"loading through filesystem currently not supported!\",\n      JSON.stringify(filesContent)\n    );\n  }\n\n  return (\n    <div>\n      {errors.length > 0 ? (\n        <Alert onClose={() => (errors.length = 0)} severity=\"error\">\n          <AlertTitle>Error occured while opening file!</AlertTitle>\n          {JSON.stringify(errors)}\n        </Alert>\n      ) : (\n        \"\"\n      )}\n      {filesystemError ? (\n        <Alert onClose={() => setFilesystemError(false)} severity=\"warning\">\n          <AlertTitle>{filesystemError}</AlertTitle>\n          Drop the file onto the region.\n        </Alert>\n      ) : (\n        \"\"\n      )}\n      {dropError ? (\n        <Alert onClose={() => setDropError(false)} severity=\"error\">\n          <AlertTitle>Loading Dropped file failed!</AlertTitle>\n          {dropError}\n        </Alert>\n      ) : (\n        \"\"\n      )}\n      <FileDrop\n        onDrop={(files) => {\n          const timer = new Timer();\n          timer.Reset();\n          console.debug(`Start loading file`);\n          setDropLoading(true);\n          // lets run in background\n          parseFile(files)\n            .then(OnLoaded)\n            .catch((err) => setDropError(err))\n            .finally(() => {\n              setDropLoading(false);\n              console.debug(\n                `Loading and parsing file done [${timer.Format()}]`\n              );\n            });\n        }}\n        onDragOver={() => {\n          if (!hover) {\n            setHover(true);\n          }\n        }}\n        onDragLeave={() => {\n          if (hover) {\n            setHover(false);\n          }\n        }}\n      >\n        <Box\n          sx={{ p: 0, border: \"1px dashed grey\", m: \"auto\" }}\n          justifyContent=\"center\"\n          justifyItems=\"center\"\n        >\n          <Button\n            disabled={loading || dropLoading}\n            onClick={() => {\n              // openFileSelector()\n              setFilesystemError(\"openFileSelector currently not supported\");\n            }}\n            sx={{ p: 3, m: \"auto\" }}\n            fullWidth={true}\n            style={\n              hover\n                ? {\n                    backgroundColor: \"rgba(63, 81, 181, 0.04)\",\n                  }\n                : {}\n            }\n          >\n            {loading || dropLoading\n              ? \"Loading ... (Will currently block any interaction)\"\n              : \"Drop output.map here\"}\n          </Button>\n        </Box>\n      </FileDrop>\n    </div>\n  );\n};\n\nexport default OutputDrop;\n","import { Grid } from \"gridjs-react\";\nimport { OneDArray, TColumn } from \"gridjs/dist/src/types\";\nimport \"./Table.css\";\nimport { ArrayType } from \"../utils/CommonTypes\";\n\ntype ComponentChild = string | number | bigint | boolean | null | undefined;\n\ntype TableContentType = string | number;\n\ntype Props = {\n  data: ArrayType[][];\n  columns: OneDArray<TColumn | string | ComponentChild>;\n};\n\nconst Table = ({ data, columns }: Props): JSX.Element => {\n  return (\n    <div>\n      <Grid\n        data={data}\n        columns={columns}\n        search={true}\n        sort={true}\n        pagination={{\n          enabled: true,\n          limit: 200,\n        }}\n        className={{\n          td: \"dense-table-cell light-content\",\n          th: \"dense-table-cell\",\n          footer: \"dense-table-cell\",\n        }}\n      />\n    </div>\n  );\n};\nexport type { TableContentType, ArrayType };\nexport default Table;\n","class Formatter {\n  /**\n   * Format the size for a table\n   * @param bytes Size to be formatted in Bytes\n   * @returns\n   */\n  public static Size(bytes: number): string {\n    const all = bytes;\n    const B = bytes % 1000;\n    bytes -= B;\n    const KB = Math.floor((bytes / 1000) % 1000);\n    bytes -= KB;\n    const MB = Math.floor(bytes / 1000 / 1000);\n\n    if (MB > 0) {\n      return `${all} (+${MB}M)`;\n    }\n    if (KB > 0) {\n      return `${all} (+${KB}K)`;\n    }\n    return `${all}`;\n  }\n\n  /**\n   * Converts number to string\n   * @param number Number to be converted\n   * @returns Hex version of number\n   */\n  public static ToHex(number: number): string {\n    return \"0x\" + `0000000000000000${number.toString(16)}`.slice(-16);\n  }\n}\nexport default Formatter;\n","import { TCell } from \"gridjs/dist/src/types\";\nimport Formatter from \"../../utils/Formatter\";\nimport Table from \"../Table\";\nimport { DataProps } from \"../../utils/CommonTypes\";\n\ntype AllTableColumns = {\n  Section: string;\n  SubSection: string;\n  Address: number;\n  AddressHex: string;\n  Size: number;\n  \"Demangled Name\": string;\n  \"Moduled Name\": string;\n  \"File Name\": string;\n  \"Mandled Name\": string;\n};\nconst AllTableColumnsOrder = [\n  \"Section\",\n  \"SubSection\",\n  \"AddressHex\",\n  {\n    name: \"Size\",\n    formatter: (cell: TCell): string => Formatter.Size(cell as number),\n  },\n  \"Demangled Name\",\n  \"Moduled Name\",\n  \"File Name\",\n  \"Mandled Name\",\n];\n\nconst TablesAll = ({ data }: DataProps): JSX.Element => {\n  return <Table data={data} columns={AllTableColumnsOrder} />;\n};\n\nexport type { AllTableColumns };\nexport { AllTableColumnsOrder, TablesAll };\n","import { TCell } from \"gridjs/dist/src/types\";\nimport Formatter from \"../../utils/Formatter\";\nimport Table, { ArrayType } from \"../Table\";\n\ntype ModulesTableColumns = {\n  Module: string;\n  \"Size no .bss\": number;\n  Size: number;\n  \"Num of records\": number;\n};\nconst ModulesTableColumnsOrder = [\n  \"Module\",\n  \"Size no .bss\",\n  {\n    name: \"Size\",\n    formatter: (cell: TCell): string => Formatter.Size(cell as number),\n  },\n  \"Num of records\",\n];\n\ntype DataProps = {\n  data: ArrayType[][];\n};\n\nconst ModulesAll = ({ data }: DataProps): JSX.Element => {\n  return <Table data={data} columns={ModulesTableColumnsOrder} />;\n};\n\nexport type { ModulesTableColumns };\nexport { ModulesTableColumnsOrder, ModulesAll };\n","function a11yProps(index: number): { id: string; \"aria-controls\": string } {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}\n\nexport { a11yProps };\n","import { Skeleton } from \"@mui/material\";\n\nconst TableSkeleton = (): JSX.Element => {\n  return (\n    <div>\n      <Skeleton animation={false} height={64} />\n      <Skeleton variant=\"rectangular\" animation={false} height={500} />\n    </div>\n  );\n};\nexport { TableSkeleton };\n","import { SyntheticEvent, useEffect, useState } from \"react\";\nimport { ObjData } from \"../parser/MapParser\";\nimport Timer from \"../utils/Timer\";\nimport Table, { TableContentType } from \"./Table\";\nimport { TabContext, TabPanel } from \"@mui/lab\";\nimport { Box, Tab, Tabs } from \"@mui/material\";\nimport { AllTableColumns, AllTableColumnsOrder, TablesAll } from \"./tables/All\";\nimport {\n  ModulesTableColumns,\n  ModulesTableColumnsOrder,\n} from \"./tables/Modules\";\nimport Formatter from \"../utils/Formatter\";\nimport { a11yProps } from \"../utils/Functions\";\nimport { TableSkeleton } from \"./tables/Skeleton\";\n\ntype Props = {\n  data: ObjData;\n};\n\ntype ByFilesTableColumns = {\n  File: string;\n} & ModulesTableColumns;\n\nclass DataTableArray<T extends Record<string, TableContentType>> {\n  Items: TableContentType[][] = [];\n\n  constructor(public ColumnsOrder: string[]) {}\n\n  add(insert: T) {\n    const sorted: TableContentType[] = [];\n    this.ColumnsOrder.forEach((c) => {\n      sorted.push(insert[c]);\n    });\n    this.Items.push(sorted);\n  }\n}\n\nconst DataView = ({ data }: Props): JSX.Element => {\n  const [value, setValue] = useState(\"all\");\n\n  const [allData, setAllData] = useState<TableContentType[][]>([]);\n  const [allModules, setAllModules] = useState<TableContentType[][]>([]);\n\n  useEffect(() => {\n    fillDatabase(data);\n  }, [data]);\n\n  const handleChange = (_event: SyntheticEvent, newValue: string) => {\n    setValue(newValue);\n  };\n\n  // TODO: move to seperate module, only view data here\n  const fillDatabase = (parser: ObjData) => {\n    const timer = new Timer();\n    console.debug(\"Start preparing database\");\n\n    const all = new DataTableArray<AllTableColumns>(\n      // eslint-disable-next-line\n      AllTableColumnsOrder.map((c: any) => {\n        return c.name || c;\n      })\n    );\n    const allModules = new DataTableArray<ModulesTableColumns>(\n      // eslint-disable-next-line\n      ModulesTableColumnsOrder.map((c: any) => {\n        return c.name || c;\n      })\n    );\n    // const byfiles = new\n\n    const notPartOfArchive: ModulesTableColumns = {\n      \"Num of records\": 0,\n      \"Size no .bss\": -1,\n      Module: \"\",\n      Size: 0,\n    };\n    const Archives: { [key: string]: ByFilesTableColumns } = {};\n    Object.keys(parser.Archives).forEach((k) => {\n      Archives[k] = {\n        \"Num of records\": 0,\n        \"Size no .bss\": -1,\n        Module: k,\n        Size: 0,\n        File: parser.Archives[k].File,\n      };\n    });\n\n    // fill all view data\n    // Wip fill module / archive categorization\n    Object.keys(parser.Sections).forEach((sectionKey) => {\n      parser.Sections[sectionKey].SubSectionsList.forEach((subSections) => {\n        const insert: AllTableColumns = {\n          \"Demangled Name\": \"\",\n          \"File Name\": subSections.FileName,\n          \"Mandled Name\": subSections.Mangled.replace(/$\\.(text|data)/g, \"\"),\n          Address: subSections.StartAddress,\n          AddressHex: Formatter.ToHex(subSections.StartAddress),\n          Section: subSections.Section,\n          SubSection: subSections.Name,\n          Size: subSections.Size,\n          \"Moduled Name\": \"\",\n        };\n\n        // WIP, move to parsing process??\n        // select archive for process\n        let partOfModule: ModulesTableColumns = Archives[subSections.FileName];\n        if (!partOfModule) {\n          partOfModule = notPartOfArchive;\n        }\n\n        partOfModule.Size += subSections.Size;\n\n        if (subSections.MangledList.length > 0) {\n          subSections.MangledList.forEach((mangled) => {\n            insert[\"Mandled Name\"] = mangled.MangledName;\n            insert.Size = mangled.Size;\n\n            insert.Address = mangled.AddressStart;\n            insert.AddressHex = Formatter.ToHex(mangled.AddressStart);\n            all.add(insert);\n\n            if (mangled.Size > 0) {\n              partOfModule[\"Num of records\"]++;\n            }\n          });\n        } else {\n          if (subSections.Size > 0) {\n            partOfModule[\"Num of records\"]++;\n          }\n\n          all.add(insert);\n        }\n      });\n    });\n\n    allModules.add(notPartOfArchive);\n    Object.keys(Archives).forEach((key) => {\n      // modules.add(Archives[key]) => byFile\n      allModules.add({\n        \"Num of records\": Archives[key][\"Num of records\"],\n        \"Size no .bss\": Archives[key][\"Size no .bss\"],\n        Module: Archives[key].Module,\n        Size: Archives[key].Size,\n      });\n    });\n\n    setAllData(all.Items);\n    setAllModules(allModules.Items);\n\n    console.debug(`Database views prepared ${timer.Format()}`);\n  };\n\n  return (\n    <TabContext value={value}>\n      <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label=\"Data analyze section\"\n        >\n          <Tab label=\"All\" value=\"all\" {...a11yProps(0)} />\n          <Tab label=\"By Module\" value=\"by_module\" {...a11yProps(1)} />\n          <Tab label=\"By File (WIP)\" value=\"by_file\" {...a11yProps(2)} />\n          <Tab label=\"By Section (WIP)\" value=\"by_section\" {...a11yProps(3)} />\n          <Tab\n            label=\"By SubSection (WIP)\"\n            value=\"by_subsection\"\n            {...a11yProps(4)}\n          />\n        </Tabs>\n      </Box>\n      <TabPanel value=\"all\">\n        <TablesAll data={allData} />\n      </TabPanel>\n      <TabPanel value=\"by_module\">\n        <Table data={allModules} columns={ModulesTableColumnsOrder} />\n      </TabPanel>\n      <TabPanel value=\"by_file\">\n        <TableSkeleton />\n      </TabPanel>\n      <TabPanel value=\"by_section\">\n        <TableSkeleton />\n      </TabPanel>\n      <TabPanel value=\"by_subsection\">\n        <TableSkeleton />\n      </TabPanel>\n    </TabContext>\n  );\n};\nexport default DataView;\n","import {\n  Alert,\n  AlertTitle,\n  Backdrop,\n  Box,\n  Divider,\n  IconButton,\n  InputBase,\n  Paper,\n  Typography,\n} from \"@mui/material\";\nimport CircularProgress, {\n  CircularProgressProps,\n} from \"@mui/material/CircularProgress\";\nimport DownloadIcon from \"@mui/icons-material/UploadFile\";\nimport { MapParser, ObjData } from \"../parser/MapParser\";\nimport { useEffect, useState } from \"react\";\nimport Timer from \"../utils/Timer\";\nimport { useSearchParams } from \"react-router-dom\";\n\ntype Props = {\n  OnLoaded: (data: ObjData) => void;\n};\n\nenum ProcessState {\n  Idle,\n  Start,\n  Download,\n  Prepare,\n  Parse,\n  LoadView,\n  Done,\n  Failed,\n}\n\ntype ProgressType = {\n  State: ProcessState;\n  Progress: number;\n};\n\nfunction CircularProgressWithLabel(\n  props: CircularProgressProps & { value: number; label: string }\n) {\n  return (\n    <Box sx={{ position: \"relative\", display: \"inline-flex\" }}>\n      <CircularProgress size={\"6rem\"} variant=\"determinate\" {...props} />\n      <Box\n        sx={{\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          position: \"absolute\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Typography variant=\"caption\" component=\"div\" color=\"text.secondary\">\n          {props.label}\n        </Typography>\n      </Box>\n    </Box>\n  );\n}\n\nconst fileQuery = \"file\";\n\nconst Downloader = ({ OnLoaded }: Props): JSX.Element => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [downloadUrl, setDownloadUrl] = useState<string>(() => {\n    const file = searchParams.get(fileQuery);\n    return file ? file : \"\";\n  });\n  const [state, setState] = useState<ProgressType>(Progress(ProcessState.Idle));\n  const [error, setError] = useState<string | null>(null);\n\n  function IsBusy(): boolean {\n    return !(\n      state.State == ProcessState.Idle || state.State == ProcessState.Done\n    );\n  }\n\n  function GetState(): string {\n    return ProcessState[state.State];\n  }\n\n  function GetProgress(): number {\n    return state.Progress;\n  }\n\n  function Progress(state: ProcessState) {\n    return {\n      Progress: ProgressState(state),\n      State: state,\n    };\n  }\n\n  function SetProgress(state: ProcessState) {\n    setState(Progress(state));\n  }\n\n  function ProgressState(state: ProcessState) {\n    let prog = 0;\n    switch (state) {\n      case ProcessState.Idle:\n      case ProcessState.Failed:\n      case ProcessState.Start:\n        prog = 0;\n        break;\n      case ProcessState.Download:\n        prog = 1;\n        break;\n      case ProcessState.Prepare:\n        prog = 2;\n        break;\n      case ProcessState.Parse:\n        prog = 3;\n        break;\n      case ProcessState.LoadView:\n        prog = 4;\n        break;\n      case ProcessState.Done:\n        prog = 5;\n        break;\n    }\n    return (100 / 5) * prog;\n  }\n\n  function downloadFile(source: string) {\n    const t = new Timer();\n\n    setSearchParams(searchParams);\n    console.debug(`Start Download: '${source}'`);\n    setState({ State: ProcessState.Start, Progress: 0 });\n\n    // TODO: requires cleanup, should be clean piped in steps without indent\n    fetch(source)\n      .then((res) => {\n        return new Promise<Blob>((resolve, reject) => {\n          SetProgress(ProcessState.Download);\n          if (res.ok) {\n            console.debug(\"Download success\");\n            resolve(res.blob());\n          } else {\n            console.error(`Request '${source}' faield`, res);\n            reject(res);\n          }\n        });\n      })\n      .then(async (blob) => {\n        SetProgress(ProcessState.Prepare);\n        console.debug(`Start process ${blob.size} bytes (${t.Format()})`);\n        return blob.text();\n      })\n      .then(async (data) => {\n        SetProgress(ProcessState.Parse);\n        const parser = new MapParser();\n        await parser.parse(data);\n        console.debug(`Data processed (${t.Format()})`);\n        return parser;\n      })\n      .then((parsed) => {\n        SetProgress(ProcessState.LoadView);\n        OnLoaded(parsed);\n      })\n      .then(() => {\n        SetProgress(ProcessState.Done);\n      })\n      .catch((err) => {\n        console.error(`Download failed ${err}`);\n        setError(\"\");\n      })\n      .finally(() => {\n        console.debug(`Download of ${source} done (${t.Format()})`);\n        SetProgress(ProcessState.Done);\n      });\n  }\n\n  useEffect(() => {\n    const file = searchParams.get(fileQuery);\n    if (file) {\n      downloadFile(file);\n    }\n  }, [searchParams]);\n\n  return (\n    <div>\n      <Backdrop\n        sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }}\n        open={IsBusy()}\n      >\n        <CircularProgressWithLabel value={GetProgress()} label={GetState()} />\n      </Backdrop>\n      {error != null ? (\n        <Alert onClose={() => setError(null)} severity=\"error\">\n          <AlertTitle>Download Failed!</AlertTitle>\n          {error}\n        </Alert>\n      ) : (\n        \"\"\n      )}\n      <Paper\n        component=\"form\"\n        sx={{\n          p: \"2px 4px\",\n          display: \"flex\",\n\n          alignItems: \"center\",\n        }}\n        onSubmit={(e) => {\n          e.preventDefault();\n          searchParams.set(fileQuery, downloadUrl);\n          downloadFile(downloadUrl);\n        }}\n      >\n        <InputBase\n          sx={{ ml: 1, flex: 1 }}\n          placeholder=\"Download by url\"\n          inputProps={{ \"aria-label\": \"search google maps\" }}\n          value={downloadUrl}\n          fullWidth={true}\n          onChange={(e) => setDownloadUrl(e.target.value)}\n        />\n        <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />\n        <IconButton\n          onClick={() => {\n            searchParams.set(fileQuery, downloadUrl);\n            downloadFile(downloadUrl);\n          }}\n          color=\"primary\"\n          sx={{ p: \"10px\" }}\n          aria-label=\"directions\"\n        >\n          <DownloadIcon />\n        </IconButton>\n      </Paper>\n    </div>\n  );\n};\nexport default Downloader;\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport { Box, Container, Typography, IconButton } from \"@mui/material\";\nimport OutputDrop from \"./ui/OutputDrop\";\nimport CloudDownloadIcon from \"@mui/icons-material/CloudDownload\";\nimport { ObjData } from \"./parser/MapParser\";\nimport DataView from \"./ui/DataView\";\nimport { Routes, Route, Outlet } from \"react-router-dom\";\nimport Downloader from \"./ui/Downloader\";\n\nfunction Layout() {\n  return (\n    <Container maxWidth=\"lg\">\n      <Box my={4}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          <IconButton href=\"./gcc-output-map-web-renderer.zip\" size=\"large\">\n            <CloudDownloadIcon color=\"action\" />\n          </IconButton>\n          output.map viewer\n        </Typography>\n        <Outlet />\n      </Box>\n    </Container>\n  );\n}\n\nfunction Home() {\n  const [data, setData] = useState<ObjData>(new ObjData());\n\n  return (\n    <div>\n      <OutputDrop OnLoaded={setData} />\n      <Downloader OnLoaded={setData} />\n\n      <DataView data={data} />\n    </div>\n  );\n}\n\nconst App = (): JSX.Element => {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Layout />}>\n        <Route index element={<Home />} />\n      </Route>\n    </Routes>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst container = document.getElementById(\"root\");\nif (!container) {\n  throw Error(\"Root element not found\");\n}\nconst root = createRoot(container);\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}